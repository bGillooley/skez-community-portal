// pages/drafts.tsx

import Head from "next/head";
import { GetServerSideProps } from "next";
import { useSession, getSession } from "next-auth/react";
import Link from "next/link";
import { EventProps } from "../components/Event";
import prisma from "../lib/prisma";
import { formatDateMonth, formatDateDay } from "@/lib/date-formatting";
import Header from "@/components/Header";
import Router from "next/router";

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  const session = await getSession({ req });
  if (!session) {
    res.statusCode = 403;
    return { props: { drafts: [] } };
  }

  let drafts = await prisma.event.findMany({
    orderBy: {
      eventDate: "asc",
    },
  });
  drafts = JSON.parse(JSON.stringify(drafts));
  return {
    props: { drafts },
  };
};

type Props = {
  drafts: EventProps[];
};

async function publishPost(id: string): Promise<void> {
  await fetch(`/api/publish/event/${id}`, {
    method: "PUT",
  });
  Router.reload();
}

async function deletePost(id: string): Promise<void> {
  await fetch(`/api/event/${id}`, {
    method: "DELETE",
  });
  Router.reload();
}

const duplicateEvent = async (event) => {
  try {
    const body = {
      title: event.title,
      category: event.category,
      content: event.content,
      venue: event.venue,
      address: event.address,
      eventDate: event.eventDate,
      eventTime: event.eventTime,
      linkUrl: event.linkUrl,
      linkDesc: event.linkUrl,
    };
    await fetch("/api/event/duplicate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body),
    });
    await Router.reload();
  } catch (error) {
    console.error(error);
  }
};

const Drafts: React.FC<Props> = (props) => {
  const { data: session } = useSession();

  if (!session) {
    return (
      <>
        <Head>
          <title>Publish Events</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <meta name="robots" content="noindex"></meta>
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Header />
        <h1>Publish events</h1>
        <div>You need to be authenticated to view this page.</div>
      </>
    );
  }

  if (session.user.role === "editor") {
    return (
      <>
        <Head>
          <title>Publish Events</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <meta name="robots" content="noindex"></meta>
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Header />
        <h1>Publish events</h1>
        <div>You need to be authenticated to view this page.</div>
      </>
    );
  }

  return (
    <>
      <Head>
        <title>Publish Some Events there..</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="robots" content="noindex"></meta>
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <div className="bg-slate-100">
        <div className="mx-4 lg:mx-auto pt-48 max-w-5xl">
          <h1 className="text-4xl pb-8">Mange Events</h1>

          {props.drafts.map((event) => (
            <div
              key={event.id}
              className="md:flex w-full items-center p-4 mb-4 shadow-sm bg-white hover:bg-slate-50"
            >
              <div className="w-[100px]">
                <div className="text-xs text-slate-400">Date of event</div>
                <div>
                  <span>{formatDateMonth(event.eventDate)}, </span>
                  <span>{formatDateDay(event.eventDate)}</span>
                </div>
              </div>
              <div className="flex-1">
                <div className="text-xs text-slate-400">Event title</div>
                <div>{event.title}</div>
              </div>
              <div className="pt-4 md:pt-0">
                {" "}
                {!event.published && (
                  <div className="inline-block">
                    <button
                      className="text-blue-700 underline font-semibold"
                      onClick={() => publishPost(event.id)}
                    >
                      Publish Event
                    </button>
                    <span className="mx-2">|</span>
                  </div>
                )}
                <button className="" onClick={() => deletePost(event.id)}>
                  <span className="underline text-red-500">Delete</span>
                </button>
                <span className="mx-2">|</span>
                <Link
                  href={{
                    pathname: "/update-event",
                    query: event,
                  }}
                >
                  <span className="underline text-slate-400">Edit/Update</span>
                </Link>
                <span className="mx-2">|</span>
                <button className="" onClick={() => duplicateEvent(event)}>
                  <span className="underline text-slate-400">
                    Duplicate event
                  </span>
                </button>
              </div>
            </div>
          ))}

          <br />
          <br />
          <br />
          <br />
        </div>
      </div>
      <style jsx>{`
        .post {
          background: var(--geist-background);
          transition: box-shadow 0.1s ease-in;
        }

        .post:hover {
          box-shadow: 1px 1px 3px #aaa;
        }

        .post + .post {
          margin-top: 2rem;
        }
      `}</style>
    </>
  );
};

export default Drafts;
